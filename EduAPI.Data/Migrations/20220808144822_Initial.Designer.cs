// <auto-generated />
using System;
using EduAPI.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduAPI.Data.Migrations
{
    [DbContext(typeof(EduContext))]
    [Migration("20220808144822_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EduAPI.Data.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CreatedTotal")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTotal = 1,
                            Description = "Co-founder of the prestigious \"Women in IT\" summit.",
                            Name = "Priscillia Chang"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTotal = 1,
                            Description = "A known Udemy coach.",
                            Name = "Alex Green"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTotal = 1,
                            Description = "Programming course provider.",
                            Name = "Get Coding Inc."
                        },
                        new
                        {
                            Id = 4,
                            CreatedTotal = 1,
                            Description = "Local API guru.",
                            Name = "Anne X"
                        });
                });

            modelBuilder.Entity("EduAPI.Data.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TypeId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            Description = "A useful set of tips.",
                            Location = "getstarted.com/article.html",
                            PublishedAt = new DateTime(2022, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Get started in IT",
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 4,
                            Description = "An exhaustive guide for beginner and moderately-skilled programmers.",
                            Location = "Rajska library",
                            PublishedAt = new DateTime(2020, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Everything you need to know about APIs",
                            TypeId = 4
                        },
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            Description = "For baby ASP .NET programmers",
                            Location = "udemy.com",
                            PublishedAt = new DateTime(2021, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Build an ASP .NET MVC app",
                            TypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            Description = "Build your first database in EF Core",
                            Location = "getcoding.com/efcore",
                            PublishedAt = new DateTime(2022, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "My first DB",
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("EduAPI.Data.Entities.MatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Definition = "A short video detailing how to implement a specific feature.",
                            Name = "Video tutorial"
                        },
                        new
                        {
                            Id = 2,
                            Definition = "A text form explaining the issue.",
                            Name = "Article"
                        },
                        new
                        {
                            Id = 3,
                            Definition = "An in-depth form, covering a large portion of material.",
                            Name = "Online course"
                        },
                        new
                        {
                            Id = 4,
                            Definition = "An analogue predecessor of big online courses.",
                            Name = "Book"
                        });
                });

            modelBuilder.Entity("EduAPI.Data.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contents = "Not really that useful",
                            MaterialId = 2,
                            Points = 3
                        },
                        new
                        {
                            Id = 2,
                            Contents = "I didn't even get any errors!",
                            MaterialId = 3,
                            Points = 10
                        },
                        new
                        {
                            Id = 3,
                            Contents = "Could be more clear",
                            MaterialId = 1,
                            Points = 7
                        },
                        new
                        {
                            Id = 4,
                            Contents = "Decent",
                            MaterialId = 4,
                            Points = 6
                        });
                });

            modelBuilder.Entity("EduAPI.Data.Entities.Material", b =>
                {
                    b.HasOne("EduAPI.Data.Entities.Author", "Author")
                        .WithMany("Materials")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduAPI.Data.Entities.MatType", "Type")
                        .WithMany("Materials")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EduAPI.Data.Entities.Review", b =>
                {
                    b.HasOne("EduAPI.Data.Entities.Material", "Material")
                        .WithMany("Reviews")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("EduAPI.Data.Entities.Author", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("EduAPI.Data.Entities.Material", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("EduAPI.Data.Entities.MatType", b =>
                {
                    b.Navigation("Materials");
                });
#pragma warning restore 612, 618
        }
    }
}
